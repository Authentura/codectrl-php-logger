<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cc_service.proto

namespace Codectrl\Logs_service;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Describes the connection between the interface and a given server. Each
 * client is supplied with a uuid that is saved to disk or to localStorage. The
 * server uses this information to determine which logs should be sent to each
 * client and to skip duplicate identified by the `uuid` of the log.
 *
 * Generated from protobuf message <code>codectrl.logs_service.Connection</code>
 */
class Connection extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>string uuid = 1;</code>
     */
    protected $uuid = '';
    /**
     * Generated from protobuf field <code>optional .codectrl.auth_service.Token token = 2;</code>
     */
    protected $token = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $uuid
     *     @type \Codectrl\Auth_service\Token $token
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CcService::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>string uuid = 1;</code>
     * @return string
     */
    public function getUuid()
    {
        return $this->uuid;
    }

    /**
     * Generated from protobuf field <code>string uuid = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setUuid($var)
    {
        GPBUtil::checkString($var, True);
        $this->uuid = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional .codectrl.auth_service.Token token = 2;</code>
     * @return \Codectrl\Auth_service\Token|null
     */
    public function getToken()
    {
        return $this->token;
    }

    public function hasToken()
    {
        return isset($this->token);
    }

    public function clearToken()
    {
        unset($this->token);
    }

    /**
     * Generated from protobuf field <code>optional .codectrl.auth_service.Token token = 2;</code>
     * @param \Codectrl\Auth_service\Token $var
     * @return $this
     */
    public function setToken($var)
    {
        GPBUtil::checkMessage($var, \Codectrl\Auth_service\Token::class);
        $this->token = $var;

        return $this;
    }

}

